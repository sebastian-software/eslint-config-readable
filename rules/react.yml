#######################################################################################
# React Plugin
#######################################################################################

plugins:
  - react

extends:
  - plugin:react/recommended

settings:
  react:
    pragma: React  # Pragma to use, default to "React"
    version: 16.5 # React version, default to the latest React stable release

rules:
  #############################################################
  # Compatibility with default ESLint behavior
  #############################################################

  # Prevent React to be incorrectly marked as unused
  react/jsx-uses-react: error

  # Prevent variables used in JSX to be incorrectly marked as unused
  react/jsx-uses-vars: error


  #############################################################
  # Quality
  #############################################################

  # Prevent missing displayName in a React component definition
  react/display-name: error

  # Disallow undeclared variables in JSX
  react/jsx-no-undef: error

  # Prevent duplicate props in JSX
  react/jsx-no-duplicate-props:
    - error
    - ignoreCase: true

  # Prevent missing parentheses around multilines JSX (fixable)
  react/jsx-wrap-multilines: error

  # Prevent too many spaces in props
  react/jsx-props-no-multi-spaces: error

  # Prevent multiple component definition per file
  react/no-multi-comp: error

  # Prevent usage of dangerous JSX properties
  react/no-danger: error

  # Prevent direct mutation of this.state
  react/no-direct-mutation-state: error

  # Prevent using this.state within a this.setState
  react/no-access-state-in-setstate: error

  # Implementing shouldComponentUpdate while extending from PureComponent
  # is probably indicative of an unfinished refactor, since there's no point
  # to extending from PureComponent when you're overriding its
  # shouldComponentUpdate.
  react/no-redundant-should-component-update: warn

  # If the user gets the casing wrong on a class property or lifecycle
  # method, it is probably a typo. Inform the user so that they can correct
  # it, because the code will not work as intended with the wrong casing.
  # Note that this rule will not be flagged on classes which don't extend
  # a class named "Component" or "PureComponent". There is technically room
  # for some false positives here (since you could have something else called
  # Component or PureComponent in your codebase), but the chance of that
  # collision occuring is pretty low in a React codebase.
  react/no-typos: error

  # Don't pollute DOM
  react/no-unknown-property: error

  # Unused prop types usually indicate that the user has some unused code,
  # or hasn't written some code yet, or isn't done with a refactor. So
  # flagging them is helpful.
  react/no-unused-prop-types: warn

  # If the user has defined a property in the state but is not using it, it
  # is likely indicative of unused or leftover code, or an in-progress
  # refactor. It might be a false negative if, for example, the user spreads
  # all their state onto a child prop, but I think the benefit outweighs the
  # drawback here, since that pattern is less common than state only being
  # dereferenced by the component who owns that state. That said, when using
  # the "spread state" pattern, the only way to get eslint to stop yelling at
  # you is to dereference all state directly or use an eslint-disable
  # comment. So I might change my mind about this one.
  react/no-unused-state: warn

  # Enforce ES5 or ES6 class for React Components
  react/prefer-es6-class: error

  # Enforce stateless React Components to be written as a pure function
  react/prefer-stateless-function: warn

  # Enforce ES5 or ES6 class for returning value in render function
  react/require-render-return: error

  # Prevent missing React when using JSX
  react/react-in-jsx-scope: error

  # React will print an error if you try to give children to an img, br, or
  # hr. This is almost always a mistake.
  react/void-dom-elements-no-children: warn

  # Make sure to wrap locale texts into i18n helpers
  react/jsx-no-literals: warn



  #############################################################
  # Performance
  #############################################################

  # Prevent usage of setState in componentDidMount
  react/no-did-mount-set-state: error

  # Prevent usage of setState in componentDidUpdate
  react/no-did-update-set-state: error

  # Updating the state during the componentWillUpdate step can lead to indeterminate component state.
  react/no-will-update-set-state: error

  # Typically a premature optimization which is quite unhandy during MVP feature development.
  # Prevent usage of .bind() and arrow functions in JSX props
  # Excellent tip on how the alternative would look like:
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#protips
  react/jsx-no-bind: off


  #############################################################
  # Deprecated features
  #############################################################

  # Prevent usage of deprecated methods
  react/no-deprecated: error

  # Prevent usage of isMounted
  react/no-is-mounted: error

  # Unsafe + Bad performance + Deprecated
  react/no-find-dom-node: error
